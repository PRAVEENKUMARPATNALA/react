{"version":3,"sources":["logo.svg","components/stateCom.js","components/prave.js","components/head.js","components/card.js","components/resume.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Component","Head","Cards","cardsData","data","details","console","log","images","logo","className","map","values","index","key","src","card","name","href","email","mobile","description","to","pathname","personcard","id","Resume","props","profile","location","App","exact","path","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,kC,kjBCEdC,YCwCTA,YC9BLC,I,gBC4BAC,EAnCL,WACN,IAAIC,EAAYC,EAAKC,QACrBC,QAAQC,IAAIJ,GACZ,IAAIK,EAAS,CAACC,IAAKA,KACnB,OACI,6BACI,wBAAIC,UAAU,gBAAd,UACA,yBAAKA,UAAU,OACdP,EAAUQ,KAAI,SAACC,EAAOC,GAAR,OACX,yBAAKH,UAAU,8BAA8BI,IAAKD,GAC9C,yBAAKH,UAAU,QACX,yBAAKK,IAAKP,EAAOK,KACjB,4BACKD,EAAOI,KAAKC,MAEjB,uBAAGC,KAAM,UAAUN,EAAOI,KAAKG,OAC3B,4BAAKP,EAAOI,KAAKG,QAErB,4BACKP,EAAOI,KAAKI,QAEjB,4BACKR,EAAOI,KAAKK,aAEjB,kBAAC,IAAD,CAAMC,GAAI,CAACC,SAAS,UAAUC,WAAW,CAACC,GAAGZ,IAASH,UAAU,mBAAhE,oB,OCZTgB,MAdf,SAAgBC,GACZ,IAAIC,EAAUxB,EAAKC,QAAQsB,EAAME,SAASL,WAAWC,IAErD,OADAnB,QAAQC,IAAIqB,GAER,yBAAKlB,UAAU,OACX,yBAAKA,UAAU,sBACX,yBAAKA,UAAU,QACX,4BAAKkB,EAAQZ,KAAKC,UCkEvBa,E,uKAdX,OACE,yBAAKpB,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOqB,OAAK,EAACC,KAAK,IAAIC,UAAW/B,IAEjC,kBAAC,IAAD,CAAO6B,OAAK,EAACC,KAAK,UAAUC,UAAWP,U,GAP/B1B,aChDEkC,QACW,cAA7BC,OAAON,SAASO,UAEe,UAA7BD,OAAON,SAASO,UAEhBD,OAAON,SAASO,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5C,QAAQ4C,MAAMA,EAAMC,c","file":"static/js/main.3ee9f537.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React,{Component} from 'react';\r\n\r\nclass StateComponent extends Component{\r\n\r\n    render(){\r\n        return <h1>This is a state Component</h1>;\r\n    }\r\n}\r\n\r\nexport default StateComponent;","import React,{Component} from 'react';\r\n\r\n// function Prave(props) {\r\n//     return(\r\n//         <h2>{props.name} Role is : {props.role}</h2>\r\n//     );\r\n// }\r\n\r\n// class Prave extends React.Component{\r\n//     render(){\r\n//         return(\r\n//             <h2>{this.props.name} Role is : {this.props.role}</h2>\r\n//         )\r\n//     }\r\n// }\r\n\r\n// class Prave extends Component{\r\n//     constructor(){\r\n//         super();\r\n//         this.state={\r\n//             name:\"sohel\",\r\n//             secondname:\"venkat\"\r\n//         }\r\n//     }\r\n\r\n//     changeState=()=>{\r\n//         this.setState({\r\n//             name:\"monal\",\r\n//             secondname:\"bigboss\"\r\n//         })\r\n//     }\r\n//     render(){\r\n//         return(\r\n//             <div>\r\n//             <h2>{this.state.name}</h2>\r\n//             <h1>{this.state.secondname}</h1>\r\n//             <button onClick={this.changeState}>Click me</button>\r\n//             </div>\r\n//         );\r\n//     }\r\n// }\r\n\r\nclass Prave extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            count:1\r\n        }\r\n    }\r\n\r\n    changeCount=()=>{\r\n        this.setState({\r\n            count:this.state.count+1\r\n        })\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <center>\r\n                <h2>{this.state.count}</h2>\r\n                <button onClick={this.changeCount}>Click Here</button>\r\n                </center>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Prave;","\r\nimport React from 'react';\r\n\r\nfunction Head(props) {\r\n    return(\r\n        <div>\r\n            <h1>Head part {props.name}</h1>\r\n            {props.children};\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Head;","import React from 'react';\r\nimport data from '../data.json';\r\nimport logo from '../logo.svg';\r\nimport {Link} from 'react-router-dom';\r\n\r\nlet Cards=()=>{\r\n    let cardsData = data.details;\r\n    console.log(cardsData);\r\n    let images = [logo,logo];\r\n    return(\r\n        <div>\r\n            <h1 className=\"text-primary\">Card-1</h1>\r\n            <div className=\"row\">\r\n            {cardsData.map((values,index)=>(\r\n                <div className=\"col-sm-10 col-md-4 col-lg-4\" key={index}>\r\n                    <div className=\"card\">\r\n                        <img src={images[index]}></img>\r\n                        <h2>\r\n                            {values.card.name}\r\n                        </h2>\r\n                        <a href={\"mailto:\"+values.card.email}>\r\n                            <h3>{values.card.email}</h3>\r\n                        </a>\r\n                        <h2>\r\n                            {values.card.mobile}\r\n                        </h2>\r\n                        <h2>\r\n                            {values.card.description}\r\n                        </h2>\r\n                        <Link to={{pathname:\"/resume\",personcard:{id:index}}} className=\"btn btn-primary\">click me</Link>\r\n                        {/* <button className=\"btn btn-primary\">click me</button> */}\r\n                    </div>\r\n                </div>\r\n            ))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Cards;","import React from 'react';\r\nimport data from \"../data.json\";\r\n\r\nfunction Resume(props) {\r\n    let profile = data.details[props.location.personcard.id];\r\n    console.log(profile);\r\n    return(\r\n        <div className=\"row\">\r\n            <div className=\"col-sm-10 col-md-2\">\r\n                <div className=\"card\">\r\n                    <h1>{profile.card.name}</h1>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Resume;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Header from './components/header.js';\nimport A from './components/component1.js';\nimport StateComponent from './components/stateCom.js';\nimport Head from './components/head.js';\nimport ReactDOM from 'react-dom';\nimport Prave from './components/prave.js';\nimport Cards from './components/card.js';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport Resume from './components/resume.js'\n\n// function App() {\n//   //return (\n//     // <div>\n//     //   <h1>cutie</h1>\n//     //   <p>Welcome to apssdc</p>\n//     //   <Header></Header>\n//     //   <A></A>\n//     //   <StateComponent></StateComponent>\n//     //   <p>{4+5}</p>\n//     //   <Head name=\"parve\">\n//     //       <p>This is Props data</p>\n//     //       <p>1st iteration</p>\n//     //   </Head>\n//     //   <Head name=\"sandy\">\n//     //       <p>This is Props data</p>\n//     //       <p>2nd iterations</p>\n//     //   </Head>\n//     // </div>\n//      //React.createElement('h2',null,'praveen')\n//      //React.createElement('h3',{style:{color:'blue'}},'praveen')\n\n//      return <div><h2>praveen is sad</h2><h3>someone make him happy</h3></div>\n//   //);\n// }\n\n// class App extends React.Component{\n//   render(){\n//     return(\n//       //React.createElement('div',{style:{background:'yellow'}},React.createElement('h2',null,'praveeen1'))\n//       React.createElement('div',{id:'hai'},React.createElement('h2',null,'praveeen2'))\n//     );\n//   }\n// }\n\n// \n\n// class App extends React.Component{\n//   render(){\n//     return(\n//       <div>\n//         <Prave name=\"Venkat\" role=\"developer\"></Prave>\n//         <Prave name=\"Akhil\" role=\"Trainer\"></Prave>\n//       </div>\n//     )\n//   }\n// }\n\nclass App extends Component{\n  render(){\n    return(\n      <div className=\"App\">\n        <BrowserRouter>\n          <Route exact path=\"/\" component={Cards}/>\n\n          <Route exact path=\"/resume\" component={Resume}/>\n        </BrowserRouter>\n        {/* <Cards/> */}\n        {/* <Prave></Prave> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}